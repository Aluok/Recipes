<?php

namespace AppBundle\Repository;

/**
 * RecipeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RecipeRepository extends \Doctrine\ORM\EntityRepository
{

    public function find5mostViewed()
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT r.title, r.slug
                FROM AppBundle:recipe AS r
                WHERE r.isPublished=1 AND r.isFinished=1
                ORDER BY r.views DESC'
            )
            ->setMaxResults(5)
            ->getResult();
    }

    public function find5bestRated()
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT r.title, r.slug
                FROM AppBundle:recipe AS r
                WHERE r.isPublished=1 AND r.isFinished=1
                ORDER BY r.rating DESC'
            )
            ->setMaxResults(5)
            ->getResult();
    }

    public function getListPublished($categories, int $page, $sorter)
    {
    	return $this->getList($categories, $page)
	    	->andWhere('r.isPublished = 1')
	    	->setFirstResult(($page - 1) * 10)
	    	->setMaxResults($page * 10)
	    	->orderBy('r.' . $sorter)
	    	->getQuery()
	    	->getResult();
    }
    
    public function getListForReview($categories, int $page, $sorter)
    {
        return $this->getList($categories, $page)
            ->andWhere('r.isPublished = 0')
            ->andWhere('r.isFinished = 1')
	    	->setFirstResult(($page - 1) * 3)
	    	->setMaxResults($page * 3)
	    	->orderBy('r.' . $sorter)
            ->getQuery()
            ->getResult();
    }
    
    private function getList($categories)
    {
    	$query = $this->createQueryBuilder('r');
        if ($categories != null) {
	        $query->add('where', $query->expr()->in('r.category', '?1'))
	            ->setParameter('1', $categories);
        }
        return $query;
    }
    
    public function getCount() 
    {
    	return $this->createQueryBuilder('r')
    		->select('COUNT(r.title)')
    		->where("r.isPublished = 1")
    		->getQuery()->getOneOrNullResult()[1];
    }
}
