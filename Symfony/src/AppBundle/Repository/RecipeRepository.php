<?php

namespace AppBundle\Repository;

/**
 * RecipeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RecipeRepository extends \Doctrine\ORM\EntityRepository
{

    public function find5mostViewed()
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT r.title, r.slug
                FROM AppBundle:recipe AS r
                WHERE r.isPublished=1 AND r.isFinished=1
                ORDER BY r.views DESC'
            )
            ->setMaxResults(5)
            ->getResult();
    }

    public function find5bestRated()
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT r.title, r.slug
                FROM AppBundle:recipe AS r
                WHERE r.isPublished=1 AND r.isFinished=1
                ORDER BY r.rating DESC'
            )
            ->setMaxResults(5)
            ->getResult();
    }

    public function getListPublished($categories, int $page, $sorter, string $direction = 'ASC')
    {
        return $this->getList($categories, $page)
            ->andWhere('r.isPublished = 1')
            ->orderBy('r.' . $sorter, $direction)
            ->getQuery()
            ->getResult();
    }

    public function getListForReview($categories, int $page, $sorter, string $direction = 'ASC')
    {
        return $this->getList($categories, $page)
            ->andWhere('r.isPublished = 0')
            ->andWhere('r.isFinished = 1')
            ->orderBy('r.' . $sorter, $direction)
            ->getQuery()
            ->getResult();
    }

    private function getList($filters, $page)
    {
        $query = $this->createQueryBuilder('r');
        if ($filters != null) {
            foreach ($filters as $column => $filter) {
                $query->add('where', $query->expr()->in('r.' . $column, '?1'))
                    ->setParameter('1', $filter);
            }
        }
        return $query
            ->setFirstResult(($page - 1) * 10)
            ->setMaxResults(10);
    }

    public function getCount($published, $filters)
    {
        $query = $this
            ->createQueryBuilder('r')
            ->select('COUNT(r.title)');
        if ($published) {
            $query->where("r.isPublished = 1");
        } else {
            $query->where("r.isPublished = 0")
                ->andWhere("r.isFinished = 1");
        }
        if ($filters != null) {
            foreach ($filters as $column => $filter) {
                $query->add('where', $query->expr()->in('r.' . $column, '?1'))
                    ->setParameter('1', $filter);
            }
        }
        return $query->getQuery()->getOneOrNullResult()[1];
    }

    public function getUniqueCategories()
    {
        return $this
            ->createQueryBuilder('r')
            ->select('r.category')
            ->groupBy('r.category')
            ->getQuery()->getResult();
    }
}
